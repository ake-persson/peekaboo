// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	resources "github.com/peekaboo-labs/peekaboo/pkg/pb/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	RegisterSystem(ctx context.Context, in *resources.System, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SystemKeepAlive(ctx context.Context, in *SystemKeepAliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (CatalogService_ListSystemsClient, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) RegisterSystem(ctx context.Context, in *resources.System, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/peekaboo.v1.services.CatalogService/RegisterSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SystemKeepAlive(ctx context.Context, in *SystemKeepAliveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/peekaboo.v1.services.CatalogService/SystemKeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (CatalogService_ListSystemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogService_ServiceDesc.Streams[0], "/peekaboo.v1.services.CatalogService/ListSystems", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceListSystemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_ListSystemsClient interface {
	Recv() (*resources.System, error)
	grpc.ClientStream
}

type catalogServiceListSystemsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceListSystemsClient) Recv() (*resources.System, error) {
	m := new(resources.System)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	RegisterSystem(context.Context, *resources.System) (*emptypb.Empty, error)
	SystemKeepAlive(context.Context, *SystemKeepAliveRequest) (*emptypb.Empty, error)
	ListSystems(*ListSystemsRequest, CatalogService_ListSystemsServer) error
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) RegisterSystem(context.Context, *resources.System) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSystem not implemented")
}
func (UnimplementedCatalogServiceServer) SystemKeepAlive(context.Context, *SystemKeepAliveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemKeepAlive not implemented")
}
func (UnimplementedCatalogServiceServer) ListSystems(*ListSystemsRequest, CatalogService_ListSystemsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSystems not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_RegisterSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.System)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).RegisterSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peekaboo.v1.services.CatalogService/RegisterSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).RegisterSystem(ctx, req.(*resources.System))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SystemKeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemKeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SystemKeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peekaboo.v1.services.CatalogService/SystemKeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SystemKeepAlive(ctx, req.(*SystemKeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListSystems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSystemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).ListSystems(m, &catalogServiceListSystemsServer{stream})
}

type CatalogService_ListSystemsServer interface {
	Send(*resources.System) error
	grpc.ServerStream
}

type catalogServiceListSystemsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceListSystemsServer) Send(m *resources.System) error {
	return x.ServerStream.SendMsg(m)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peekaboo.v1.services.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSystem",
			Handler:    _CatalogService_RegisterSystem_Handler,
		},
		{
			MethodName: "SystemKeepAlive",
			Handler:    _CatalogService_SystemKeepAlive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSystems",
			Handler:       _CatalogService_ListSystems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/v1/services/catalog.proto",
}
